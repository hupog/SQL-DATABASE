SET AUTOCOMMIT ON;

/********************/
/* 1.- Sentencias de borrado de todas las tablas y vistas */
/********************/
DROP TABLE A_E_ALQUILA CASCADE CONSTRAINTS;
DROP TABLE ARREND_ALQUILA CASCADE CONSTRAINTS;
DROP TABLE FAMILIAR CASCADE CONSTRAINTS;
DROP TABLE EMPLEADO CASCADE CONSTRAINTS;
DROP TABLE CLIENTE_TLF CASCADE CONSTRAINTS;
DROP TABLE SUCURSAL CASCADE CONSTRAINTS;
DROP TABLE JEFE_SUCURSAL CASCADE CONSTRAINTS;
DROP TABLE LIMPIEZA CASCADE CONSTRAINTS;
DROP TABLE OFICINA CASCADE CONSTRAINTS;
DROP TABLE INMUEBLE CASCADE CONSTRAINTS;
DROP TABLE ARREND_ESPECIAL CASCADE CONSTRAINTS;
DROP TABLE ARRENDATARIO CASCADE CONSTRAINTS;
DROP TABLE COMPRADOR CASCADE CONSTRAINTS;
DROP TABLE DUENHO CASCADE CONSTRAINTS;
DROP TABLE TRANSACCION CASCADE CONSTRAINTS;
DROP TABLE INCIDENCIA CASCADE CONSTRAINTS;
DROP TABLE CLIENTE CASCADE CONSTRAINTS;
DROP TABLE EMPRESA CASCADE CONSTRAINTS;
DROP TABLE BANCO CASCADE CONSTRAINTS;
DROP TABLE PERSONA CASCADE CONSTRAINTS;

DROP VIEW VISTA_ACTUALIZABLE;
DROP VIEW VISTA_NO_ACTUALIZABLE;

/******************/
/* 2.- Creamos las tablas de nuestro Diagrama EER */
/******************/

CREATE TABLE CLIENTE (
    ID_CLIENTE   NUMBER(3) NOT NULL,
    DIRECCION   VARCHAR2(20),
    CONSTRAINT pkCLIENTE PRIMARY KEY (ID_CLIENTE)
);

CREATE TABLE PERSONA ( 
    DNI     CHAR(9) NOT NULL, 
    NOMBRE   VARCHAR2(15) NOT NULL,
    APELLIDOS   VARCHAR2(35) NOT NULL,
    FECHA_NACIMIENTO    DATE NOT NULL,
    MAIL   VARCHAR2(30) NOT NULL,
    ID_CLIENTE   NUMBER(3) NOT NULL,
    CONSTRAINT pkPERSONA PRIMARY KEY (DNI),
    CONSTRAINT fkCLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE
);

CREATE TABLE BANCO (
    NIF    CHAR(9) NOT NULL,
    NOMBRE   VARCHAR2(15) NOT NULL,
    ID_CLIENTE   NUMBER(3) NOT NULL,
    CONSTRAINT pkBANCO PRIMARY KEY (NIF),
    CONSTRAINT fkCLIENTE_BANCO FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE
);

CREATE TABLE EMPRESA (
    NIF    CHAR(9) NOT NULL,
    NOMBRE   VARCHAR2(15) NOT NULL,
    ID_CLIENTE   NUMBER(3) NOT NULL,
    CONSTRAINT pkEMPRESA PRIMARY KEY (NIF),
    CONSTRAINT fkCLIENTE_EMPRESA FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE
);

CREATE TABLE CLIENTE_TLF (
    TLF_CLIENTE VARCHAR2(9) NOT NULL,
    ID_CLIENTE NUMBER(3) NOT NULL,
    CONSTRAINT pkCLIENTE_TLF PRIMARY KEY (TLF_CLIENTE),
    CONSTRAINT fkID_CLIENTE_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE ON DELETE CASCADE
);

CREATE TABLE TRANSACCION (
    NUM_TRANS    VARCHAR2(12) NOT NULL,
    CANTIDAD    DECIMAL(9,2),
    CONSTRAINT pkNUM_TRANS PRIMARY KEY (NUM_TRANS)
);

CREATE TABLE DUENHO (
    ID_CLIENTE    NUMBER(3) NOT NULL,                       
    CONSTRAINT pkDUENHO PRIMARY KEY (ID_CLIENTE),
    CONSTRAINT fkDUENHO_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE ON DELETE CASCADE
);

CREATE TABLE COMPRADOR (
    ID_CLIENTE    NUMBER(3) NOT NULL,                       
    CONSTRAINT pkCOMPRADOR PRIMARY KEY (ID_CLIENTE),
    CONSTRAINT fkCOMPRADOR_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE ON DELETE CASCADE
);

CREATE TABLE ARRENDATARIO (
    ID_CLIENTE    NUMBER(3) NOT NULL,                       
    CONSTRAINT pkARRENDATARIO PRIMARY KEY (ID_CLIENTE),
    CONSTRAINT fkARRENDATARIO_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE ON DELETE CASCADE
);

CREATE TABLE ARREND_ESPECIAL (
    ID_CLIENTE    NUMBER(3) NOT NULL,                       
    CONSTRAINT pkARREND_ESPECIAL PRIMARY KEY (ID_CLIENTE),
    CONSTRAINT fkA_E_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE ON DELETE CASCADE
);

CREATE TABLE INCIDENCIA (
    NUM_INCIDENCIA      SMALLINT NOT NULL,
    DESCR_INCIDENCIA    VARCHAR2(200),
    FECHA_INCIDENCIA    DATE NOT NULL,
    ID_CLIENTE    NUMBER(3) NOT NULL,
    NUM_CAT    VARCHAR2(20) NOT NULL,
    CONSTRAINT pkINCIDENCIA PRIMARY KEY (NUM_INCIDENCIA, ID_CLIENTE, NUM_CAT),
    CONSTRAINT fkINCIDENCIA_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE,
    CONSTRAINT fkINCIDENCIA_INMUEBLE FOREIGN KEY (NUM_CAT) REFERENCES INMUEBLE
);

CREATE TABLE INMUEBLE (
    NUM_CAT    VARCHAR(20) NOT NULL,
    DIRECCION    VARCHAR2(50) NOT NULL,
    PRECIO_COMPRA    DECIMAL(9,2),
    PRECIO_ALQUILER   DECIMAL(9,2),
    CONSTRAINT pkINMUEBLE PRIMARY KEY (NUM_CAT)
);

CREATE TABLE OFICINA (
    NUM_OFICINA    VARCHAR2(20) NOT NULL,
    CONSTRAINT pkOFICINA PRIMARY KEY (NUM_OFICINA)
);


CREATE TABLE SUCURSAL (
    NUM_SUCUR   NUMBER(3) NOT NULL,
    DIRECCION   VARCHAR2(20),
    CONSTRAINT pkSUCURSAL PRIMARY KEY (NUM_SUCUR)
);

CREATE TABLE JEFE_SUCURSAL (
    DNI     CHAR(9) NOT NULL, 
    NUM_SUCUR   NUMBER(3) NOT NULL,
    SALARIO DECIMAL(6,2),
    CONSTRAINT pkJEFE_SUCURSAL PRIMARY KEY (DNI)
    CONSTRAINT fkJEFE_S_SUCURSAL FOREIGN KEY (NUM_SUCUR) REFERENCES SUCURSAL
);
CREATE TABLE EMPLEADO (
    NSS     NUMBER(12) NOT NULL,
    DNI     CHAR(9) NOT NULL, 
    NOMBRE   VARCHAR2(15) NOT NULL,
    SALARIO DECIMAL(6,2),
    FECHA_NACIMIENTO    DATE NOT NULL,
    CONSTRAINT pkEMPLEADO PRIMARY KEY (NSS),
    CONSTRAINT fkEMPLEADO_PERSONA FOREIGN KEY (DNI) REFERENCES PERSONA
);

CREATE TABLE LIMPIEZA (
    NSS    NUMBER(12) NOT NULL,
    CONSTRAINT pkLIMPIEZA PRIMARY KEY (NSS),
    CONSTRAINT fkLIMPIEZA_EMPLEADO FOREIGN KEY (NSS) REFERENCES EMPLEADO
);

CREATE TABLE FAMILIAR (
    DNI CHAR(9) NOT NULL,
    NOMBRE VARCHAR2(15) NOT NULL,
    APELLIDOS VARCHAR2(35) NOT NULL,
    SALARIO DECIMAL(6,2),
    DIRECCION VARCHAR2(20),
    MAIL VARCHAR2(20),
    FECHA_NACIMIENTO    DATE NOT NULL,
    NSS    NUMBER(12) NOT NULL,
    CONSTRAINT pkFAMILIAR PRIMARY KEY(NSS, DNI),
    CONSTRAINT fkFAMILIAR_EMPLEADO FOREIGN KEY (NSS) REFERENCES EMPLEADO
);

CREATE TABLE ARREND_ALQUILA (
    FECHA_FIN DATE NOT NULL,
    FECHA_INICIO DATE NOT NULL,
    ID_CLIENTE    NUMBER(3) NOT NULL,  
    NUM_CAT    VARCHAR2(20) NOT NULL,                     
    CONSTRAINT pkARREND_ALQUILA PRIMARY KEY (ID_CLIENTE, NUM_CAT),
    CONSTRAINT fkARREND_ALQUILA_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE,
    CONSTRAINT fkARREND_ALQUILA_INMUEBLE FOREIGN KEY (NUM_CAT) REFERENCES INMUEBLE
);

CREATE TABLE A_E_ALQUILA (
    FECHA_FIN DATE NOT NULL,
    FECHA_INICIO DATE NOT NULL,
    ID_CLIENTE    NUMBER(3) NOT NULL,  
    NUM_CAT    VARCHAR2(20) NOT NULL, 
    NSS     NUMBER(12) NOT NULL,
    CONSTRAINT pkA_E_ALQUILA PRIMARY KEY (NSS, ID_CLIENTE, NUM_CAT),
    CONSTRAINT fkA_E_ALQUILA_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE,
    CONSTRAINT fkA_E_ALQUILA_FAMILIAR FOREIGN KEY (NSS) REFERENCES FAMILIAR,
    CONSTRAINT fkA_E_ALQUILA_INMUEBLE FOREIGN KEY (NUM_CAT) REFERENCES INMUEBLE
);

/*******************/
/* 3.- Creamos los índices necesarios sobre las tablas */
/*******************/

CREATE INDEX INFOFAMILIARES ON FAMILIAR (NOMBRE DESC);
CREATE INDEX INFOEMPLEADO ON EMPLEADO (SALARIO DESC);
CREATE INDEX INFOINMUEBLEC ON INMUEBLE (PRECIO_COMPRA DESC);
CREATE INDEX INFOINMUEBLEA ON INMUEBLE (PRECIO_ALQUILER DESC);

/****************/
/* 4.- Creamos las vistas para nuestra temática */
/****************/

--Vista N0 Actualizable
CREATE OR REPLACE VIEW VISTA_NO_ACTUALIZABLE(DNI, NOMBRE, APELLIDOS, FECHA_NACIMIENTO)
AS SELECT DNI, NOMBRE, APELLIDOS, FECHA_NACIMIENTO
FROM PERSONA;

-- Vista Actualizable
CREATE OR REPLACE VIEW VISTA_ACTUALIZABLE(PRECIO_COMPRA, PRECIO_ALQUILER)
AS SELECT PRECIO_COMPRA, PRECIO_ALQUILER
FROM INMUEBLE;

/*******************/
/* 5.- Insertamos datos de ejemplo para todas las tablas */
/*******************/
INSERT INTO PERSONA (DNI, NOMBRE, APELLIDOS, FECHA_NACIMIENTO, MAIL, ID_CLIENTE)
VALUES ('123456789', 'Juan', 'Pérez López',TO_DATE('1990-05-15', 'YYYY-MM-DD'), 'juan@example.com', 1);

INSERT INTO PERSONA (DNI, NOMBRE, APELLIDOS, FECHA_NACIMIENTO, MAIL, ID_CLIENTE)
VALUES ('987654321', 'María', 'Gómez Rodríguez', TO_DATE('1985-09-20', 'YYYY-MM-DD'), 'maria@example.com', 2);

INSERT INTO BANCO (NIF, NOMBRE, ID_CLIENTE)
VALUES ('111111111', 'Banco A', 1);

INSERT INTO BANCO (NIF, NOMBRE, ID_CLIENTE)
VALUES ('222222222', 'Banco B', 2);

INSERT INTO EMPRESA (NIF, NOMBRE, ID_CLIENTE)
VALUES ('333333333', 'Empresa X', 3);

INSERT INTO EMPRESA (NIF, NOMBRE, ID_CLIENTE)
VALUES ('444444444', 'Empresa Y', 2);

INSERT INTO CLIENTE (ID_CLIENTE, DIRECCION)
VALUES (1, 'Calle Principal, 123');

INSERT INTO CLIENTE (ID_CLIENTE, DIRECCION)
VALUES (2, 'Avenida Secundaria, 456');

INSERT INTO CLIENTE_TLF (TLF_CLIENTE, ID_CLIENTE)
VALUES ('555-555-555', 1);

INSERT INTO CLIENTE_TLF (TLF_CLIENTE, ID_CLIENTE)
VALUES ('777-777-777', 2);

INSERT INTO TRANSACCION (NUM_TRANS, CANTIDAD)
VALUES ('T123456789', 1000);

INSERT INTO TRANSACCION (NUM_TRANS, CANTIDAD)
VALUES ('T987654321', 1500);

INSERT INTO INCIDENCIA (NUM_INCIDENCIA, DESCR_INCIDENCIA, FECHA_INCIDENCIA, ID_CLIENTE, NUM_CAT)
VALUES (1, 'Problema con el contrato', TO_DATE('2023-01-20', 'YYYY-MM-DD'), 1, 1);

INSERT INTO INCIDENCIA (NUM_INCIDENCIA, DESCR_INCIDENCIA, FECHA_INCIDENCIA, ID_CLIENTE, NUM_CAT)
VALUES (2, 'Fuga de agua', TO_DATE('2023-02-10', 'YYYY-MM-DD'), 2, 2);

INSERT INTO DUENHO (ID_CLIENTE)
VALUES (1);

INSERT INTO DUENHO (ID_CLIENTE)
VALUES (2);

INSERT INTO COMPRADOR (ID_CLIENTE)
VALUES (3);

INSERT INTO COMPRADOR (ID_CLIENTE)
VALUES (4);

INSERT INTO ARRENDATARIO (ID_CLIENTE)
VALUES (5);

INSERT INTO ARRENDATARIO (ID_CLIENTE)
VALUES (6);

INSERT INTO ARREND_ESPECIAL (ID_CLIENTE)
VALUES (7);

INSERT INTO ARREND_ESPECIAL (ID_CLIENTE)
VALUES (8);

INSERT INTO INMUEBLE (NUM_CAT, DIRECCION, PRECIO_COMPRA, PRECIO_ALQUILER)
VALUES ('001', 'Calle Principal, 123', 250000, 1200);

INSERT INTO INMUEBLE (NUM_CAT, DIRECCION, PRECIO_COMPRA, PRECIO_ALQUILER)
VALUES ('002', 'Avenida Secundaria, 456', 300000, 1500);

INSERT INTO OFICINA (NUM_OFICINA)
VALUES ('OF001');

INSERT INTO OFICINA (NUM_OFICINA)
VALUES ('OF002');

INSERT INTO OFICINA (NUM_OFICINA)
VALUES ('OF003');

INSERT INTO OFICINA (NUM_OFICINA)
VALUES ('OF004');

INSERT INTO LIMPIEZA (NSS)
VALUES (123456789);

INSERT INTO LIMPIEZA (NSS)
VALUES (987654321);

INSERT INTO SUCURSAL (NUM_SUCUR, DIRECCION)
VALUES (1, 'Calle Principal, 123');

INSERT INTO SUCURSAL (NUM_SUCUR, DIRECCION)
VALUES (2, 'Avenida Secundaria, 456');

INSERT INTO JEFE_SUCURSAL (DNI,NUM_SUCUR,SALARIO)
VALUES ('45123134L',2,4000.00);

INSERT INTO JEFE_SUCURSAL (DNI,NUM_SUCUR,SALARIO)
VALUES ('45134535T',1,4000.00);

INSERT INTO EMPLEADO (NSS, DNI, NOMBRE, SALARIO, FECHA_NACIMIENTO)
VALUES (111111111, '123456789', 'Juan Pérez', 2500.00, TO_DATE('1985-09-20', 'YYYY-MM-DD'));

INSERT INTO EMPLEADO (NSS, DNI, NOMBRE, SALARIO, FECHA_NACIMIENTO)
VALUES (222222222, '987654321', 'María Gómez', 2800.00, TO_DATE('1990-05-15', 'YYYY-MM-DD'));

INSERT INTO FAMILIAR (DNI, NOMBRE, APELLIDOS, SALARIO, DIRECCION, MAIL, FECHA_NACIMIENTO, NSS)
VALUES ('555555555', 'Laura', 'Gómez Rodríguez', 1500.00, 'Calle Familiar, 789', 'laura@example.com', TO_DATE('1992-03-10', 'YYYY-MM-DD'), 111111111);

INSERT INTO FAMILIAR (DNI, NOMBRE, APELLIDOS, SALARIO, DIRECCION, MAIL, FECHA_NACIMIENTO, NSS)
VALUES ('666666666', 'Pedro', 'López Pérez', 1800.00, 'Avenida Amigo, 456', 'pedro@example.com', TO_DATE('1988-07-25', 'YYYY-MM-DD'), 222222222);

INSERT INTO ARREND_ALQUILA (FECHA_FIN, FECHA_INICIO, ID_CLIENTE, NUM_CAT)
VALUES (TO_DATE('2023-11-31', 'YYYY-MM-DD'), TO_DATE('2023-01-04', 'YYYY-MM-DD'), 1, '001');

INSERT INTO ARREND_ALQUILA (FECHA_FIN, FECHA_INICIO, ID_CLIENTE, NUM_CAT)
VALUES (TO_DATE('2023-10-31', 'YYYY-MM-DD'), TO_DATE('2023-01-03', 'YYYY-MM-DD'), 2, '002');

INSERT INTO A_E_ALQUILA (FECHA_FIN, FECHA_INICIO, ID_CLIENTE, NUM_CAT, NSS)
VALUES (TO_DATE('2023-09-31', 'YYYY-MM-DD'), TO_DATE('2023-01-02', 'YYYY-MM-DD'), '555555555', '001', 111111111);

INSERT INTO A_E_ALQUILA (FECHA_FIN, FECHA_INICIO, ID_CLIENTE, NUM_CAT, NSS)
VALUES (TO_DATE('2023-08-31', 'YYYY-MM-DD'), TO_DATE('2023-01-01', 'YYYY-MM-DD'), '666666666', '002', 222222222);

/****************/
/* 6.- Incluímos sentencias de comprobación */
/****************/

SELECT * FROM PERSONA;
SELECT * FROM BANCO;
SELECT * FROM EMPRESA;
SELECT * FROM CLIENTE;
SELECT * FROM DUENHO;
SELECT * FROM TRANSACCION;
SELECT * FROM INCIDENCIA;
SELECT * FROM COMPRADOR;
SELECT * FROM ARRENDATARIO;
SELECT * FROM ARREND_ESPECIAL;
SELECT * FROM INMUEBLE;
SELECT * FROM OFICINA;
SELECT * FROM LIMPIEZA;
SELECT * FROM SUCURSAL;
SELECT * FROM JEFE_SUCURSAL;
SELECT * FROM CLIENTE_TLF;
SELECT * FROM EMPLEADO;
SELECT * FROM FAMILIAR;
SELECT * FROM ARREND_ALQUILA;
SELECT * FROM A_E_ALQUILA;



CREATE OR REPLACE
PROCEDURE ListaInmueblesAlquiladosCliente(idCliente IN NUMBER)
IS
    inmuebleArrendado ARREND_ALQUILA%ROWTYPE;
    cursor c_inmueble_arrendado is
        SELECT *
        FROM ARREND_ALQUILA
        WHERE id_cliente = idCliente;
BEGIN
    OPEN c_inmueble_arrendado;
    DBMS_OUTPUT.PUT_LINE('Inmuebles alquilados por el cliente con ID ' || idCliente);
    LOOP
        FETCH c_inmueble_arrendado INTO inmuebleArrendado;
        EXIT WHEN c_inmueble_arrendado%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Número de catálogo: ' || inmuebleArrendado.num_cat);
        DBMS_OUTPUT.PUT_LINE('Dirección: ' || inmuebleArrendado.direccion);
        DBMS_OUTPUT.PUT_LINE('Precio de alquiler: ' || inmuebleArrendado.precio_alquiler);
    END LOOP;
    CLOSE c_inmueble_arrendado;
END ListaInmueblesAlquiladosCliente;









CREATE OR REPLACE
FUNCTION NumInmueblesAlquiladosCliente(idCliente IN NUMBER)
RETURN NUMBER
IS
    numInmuebles NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO numInmuebles
    FROM ARREND_ALQUILA
    WHERE id_cliente = idCliente;
    RETURN numInmuebles;
END NumInmueblesAlquiladosCliente;

CREATE OR REPLACE
PROCEDURE ListaInmueblesAlquiladosPorCategoria(categoria IN VARCHAR2)
IS
    inmuebleArrendado ARREND_ALQUILA%ROWTYPE;
    cursor c_inmueble_arrendado is
        SELECT *
        FROM ARREND_ALQUILA
        WHERE num_cat = categoria;
BEGIN
    OPEN c_inmueble_arrendado;
    DBMS_OUTPUT.PUT_LINE('Inmuebles alquilados de la categoría ' || categoria);
    LOOP
        FETCH c_inmueble_arrendado INTO inmuebleArrendado;
        EXIT WHEN c_inmueble_arrendado%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Número de catálogo: ' || inmuebleArrendado.num_cat);
        DBMS_OUTPUT.PUT_LINE('Dirección: ' || inmuebleArrendado.direccion);
        DBMS_OUTPUT.PUT_LINE('Precio de alquiler: ' || inmuebleArrendado.precio_alquiler);
    END LOOP;
    CLOSE c_inmueble_arrendado;
END ListaInmueblesAlquiladosPorCategoria;







CREATE OR REPLACE
FUNCTION NumInmueblesAlquiladosPorCategoria(categoria IN VARCHAR2)
RETURN NUMBER
IS
    numInmuebles NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO numInmuebles
    FROM arrend_alquila
    WHERE num_cat = categoria;
    RETURN numInmuebles;
END NumInmueblesAlquiladosPorCategoria;

CREATE OR REPLACE
PROCEDURE ListaClientesConInmueblesAlquilados
IS
    cliente ARRENDATARIO%ROWTYPE;
    cursor c_cliente is
        SELECT *
        FROM arrendatario
        WHERE id_cliente IN
            (SELECT id_cliente
             FROM arrend_alquila);
BEGIN
    OPEN c_cliente;
    DBMS_OUTPUT.PUT_LINE('Clientes con inmuebles alquilados');
    LOOP
        FETCH c_cliente INTO cliente;
        EXIT WHEN c_cliente%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID de cliente: ' || cliente.id_cliente);
        DBMS_OUTPUT.PUT_LINE('Nombre: ' || cliente.nombre);
        DBMS_OUTPUT.PUT_LINE('Apellidos: ' || cliente.apellidos);
    END LOOP;
    CLOSE c_cliente;
END ListClientesConInmueblesAlquilados;



CREATE OR REPLACE
FUNCTION PrecioMedioInmueblesAlquiladosPorCategoria(categoria IN VARCHAR2)
RETURN NUMBER
IS
    precioMedio NUMBER;
BEGIN
    BEGIN
        SELECT AVG(precio_alquiler)
        INTO precioMedio
        FROM arrend_alquila
        WHERE num_cat = categoria;
        RETURN precioMedio;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN EN FUNCIÓN: PrecioMedioInmueblesAlquiladosPorCategoria]');
            DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SQLERRM);
            RETURN -1;
    END;
END PrecioMedioInmueblesAlquiladosPorCategoria;


SET SERVEROUTPUT ON
DECLARE
  idCliente NUMBER := 100;
  toRet NUMBER;
  categoria VARCHAR2 := 'VIVIENDA';
BEGIN
  DBMS_OUTPUT.NEW_LINE;

  BEGIN
    -- Procedimiento
    DBMS_OUTPUT.PUT_LINE('======>INICIO PROCEDIMIENTO: ListaInmueblesAlquiladosCliente');
    ListaInmueblesAlquiladosCliente(idCliente);
    DBMS_OUTPUT.PUT_LINE('======>FIN PROCEDIMIENTO: ListaInmueblesAlquiladosCliente');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
      DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SQLERRM);
  END;

BEGIN
  DBMS_OUTPUT.NEW_LINE;

  BEGIN
    -- Procedimiento
    DBMS_OUTPUT.PUT_LINE('======>INICIO FUNCION: NumInmueblesAlquiladosCliente');
    toRet := NumInmueblesAlquiladosCliente(idCliente);
    DBMS_OUTPUT.PUT_LINE('El cliente con ID ' || idCliente || ' tiene ' || toRet || ' inmuebles alquilados');
    DBMS_OUTPUT.PUT_LINE('======>FIN FUNCION: NumInmueblesAlquiladosCliente');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
      DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SQLERRM);
  END;


BEGIN
  DBMS_OUTPUT.NEW_LINE;

  BEGIN
    -- Procedimiento
    DBMS_OUTPUT.PUT_LINE('======>INICIO PROCEDIMIENTO: ListaInmueblesAlquiladosPorCategoria');
    ListaInmueblesAlquiladosPorCategoria(categoria);
    DBMS_OUTPUT.PUT_LINE('======>FIN PROCEDIMIENTO: ListaInmueblesAlquiladosPorCategoria');
  EXCEPTION
    WHEN CATEGORIA_NO_EXISTENTE_EXCEPCION THEN
      DBMS_OUTPUT.PUT_LINE('La categoría ' || categoria || ' no existe');
  END;
END;

BEGIN
  DBMS_OUTPUT.NEW_LINE;

  BEGIN
    -- Función
    DBMS_OUTPUT.PUT_LINE('======>INICIO FUNCIÓN: NumInmueblesAlquiladosPorCategoria');
    toRet := NumInmueblesAlquiladosPorCategoria(categoria);
    DBMS_OUTPUT.PUT_LINE('La categoría ' || categoria || ' tiene ' || toRet || ' inmuebles alquilados');
    DBMS_OUTPUT.PUT_LINE('======>FIN FUNCIÓN: NumInmueblesAlquiladosPorCategoria');
  EXCEPTION
    WHEN CATEGORIA_NO_EXISTENTE_EXCEPCION THEN
      DBMS_OUTPUT.PUT_LINE('La categoría ' || categoria || ' no existe');
  END;
END;
END;

BEGIN
  DBMS_OUTPUT.NEW_LINE;

  BEGIN
    -- Procedimiento
    DBMS_OUTPUT.PUT_LINE('======>INICIO PROCEDIMIENTO: ListaClientesConInmueblesAlquilados');
    ListaClientesConInmueblesAlquilados();
    DBMS_OUTPUT.PUT_LINE('======>FIN PROCEDIMIENTO: ListaClientesConInmueblesAlquilados');
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
      DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SQLERRM);
  END;


BEGIN
  DBMS_OUTPUT.NEW_LINE;

  BEGIN
    -- Función
    DBMS_OUTPUT.PUT_LINE('======>INICIO FUNCIÓN: PrecioMedioInmueblesAlquiladosPorCategoria');
    toRet := PrecioMedioInmueblesAlquiladosPorCategoria(categoria);
    IF toRet = -1 THEN
      RAISE_APPLICATION_ERROR(-20005, 'Error al calcular el precio medio');
    ELSE
      DBMS_OUTPUT.PUT_LINE('El precio medio de la categoría ' || categoria || ' es de ' || toRet );
    END IF;
    DBMS_OUTPUT.PUT_LINE('======>FIN FUNCIÓN: PrecioMedioInmueblesAlquiladosPorCategoria');
  EXCEPTION
    WHEN CATEGORIA_NO_EXISTENTE_EXCEPCION THEN
      DBMS_OUTPUT.PUT_LINE('La categoría ' || categoria || ' no existe');
  END;


END;

--SENTENCIAS DE DEFINICIÓN DE TRIGGERS

-- TRIGGER COMPROBAR DNI
SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER COMPROBAR_DNI
    BEFORE INSERT OR UPDATE OF DNI ON PERSONA
    FOR EACH ROW
DECLARE
    R NUMBER;
    nDNI NUMBER;
    ARRAYLETRAS CHAR(23) := 'TRWAGMYFPDXBNJZSQVHLCKE'; 
    LETRA CHAR(1);
    nLETRA CHAR(1);
BEGIN
    nDNI := TO_NUMBER(SUBSTR(:NEW.DNI, 1, 8));
    LETRA := SUBSTR(:NEW.DNI, 9, 1);
    R := nDNI MOD 23;
    nLETRA := SUBSTR(ARRAYLETRAS, R + 1, 1);
    IF LETRA != nLETRA THEN
        DBMS_OUTPUT.PUT_LINE('El DNI es INCORRECTO');
    END IF;
END COMPROBAR_DNI;

--TRIGGER CHECK SALARIO
CREATE OR REPLACE TRIGGER SALARIO_VALIDO
FOR INSERT OR UPDATE OF SALARIO ON EMPLEADO
COMPOUND TRIGGER
    SAL_AUX NUMBER;
    BEFORE STATEMENT IS
    BEGIN
        SELECT SALARIO INTO SAL_AUX
        FROM EMPLEADO E, JEFE_SUCURSAL J
        WHERE E.DNI = J.DNI_JEFE;
    END BEFORE STATEMENT;
    BEFORE EACH ROW IS
    BEGIN
        IF :NEW.SALARIO > SAL_AUX THEN
            RAISE_APPLICATION_ERROR(-20010, 'Un empleado no puede tener más sueldo que el jefe');
        END IF;
    END BEFORE EACH ROW;
END SALARIO_VALIDO;

-- TRIGGER COMPROBAR ALQUILER
SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER COMPROBAR_ALQUILER
BEFORE INSERT OR UPDATE OF FECHA_INICIO, FECHA_FIN ON ALQUILER
FOR EACH ROW
DECLARE
    FECHA_INICIO_ALQUILER DATE;
    FECHA_FIN_ALQUILER DATE;
BEGIN
    FECHA_INICIO_ALQUILER := :NEW.FECHA_INICIO;
    FECHA_FIN_ALQUILER := :NEW.FECHA_FIN;
    IF FECHA_FIN_ALQUILER < FECHA_INICIO_ALQUILER THEN
        RAISE_APPLICATION_ERROR(-20001, 'La fecha de fin del alquiler no puede ser anterior a la fecha de inicio');
    END IF;
END COMPROBAR_ALQUILER;

-- TRIGGER COMPROBAR TLFN
SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER COMPROBAR_TLFN
BEFORE INSERT OR UPDATE OF TELEFONO ON PERSONA
FOR EACH ROW
DECLARE
    nTELEFONO VARCHAR2(15);
BEGIN
    nTELEFONO := :NEW.TELEFONO;
   IF LENGTH(nTELEFONO) > 5 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El número de teléfono no es válido');
    END IF;

END COMPROBAR_TLFN;


--SENTENCIAS DE PRUEBA DE TRIGGERS

-- Para COMPROBAR_DNI
INSERT INTO PERSONA (DNI, NOMBRE, APELLIDO) VALUES ('12345678A', 'Juan', 'Perez');
INSERT INTO PERSONA (DNI, NOMBRE, APELLIDO) VALUES ('98765432B', 'Ana', 'Gomez');
BEGIN
    INSERT INTO PERSONA (DNI, NOMBRE, APELLIDO) VALUES ('11111111X', 'Invalido1', 'Apellido1');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error esperado: ' || SQLERRM);
END;
UPDATE PERSONA SET DNI = '87654321C' WHERE NOMBRE = 'Juan';
BEGIN
    UPDATE PERSONA SET DNI = '99999999Z' WHERE NOMBRE = 'Ana';
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error esperado: ' || SQLERRM);
END;


-- Para SALARIO_VALIDO
INSERT INTO JEFE_SUCURSAL (DNI_JEFE, NOMBRE_SUCURSAL) VALUES ('12345678A', 'Sucursal1');
INSERT INTO EMPLEADO (DNI, NOMBRE, SALARIO) VALUES ('87654321B', 'Empleado1', 8000);
BEGIN
    INSERT INTO EMPLEADO (DNI, NOMBRE, SALARIO) VALUES ('23456789C', 'Empleado2', 12000);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error esperado: ' || SQLERRM);
END;
UPDATE EMPLEADO SET SALARIO = 9000 WHERE NOMBRE = 'Empleado1';
BEGIN
    UPDATE EMPLEADO SET SALARIO = 11000 WHERE NOMBRE = 'Empleado1';
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error esperado: ' || SQLERRM);
END;
SELECT * FROM JEFE_SUCURSAL;
SELECT * FROM EMPLEADO WHERE NOMBRE IN ('Empleado1', 'Empleado2');


-- Para COMPROBAR_ALQUILER
INSERT INTO ALQUILER (FECHA_INICIO, FECHA_FIN, OTROS_CAMPOS) VALUES (TO_DATE('2024-01-08', 'YYYY-MM-DD'), TO_DATE('2024-01-15', 'YYYY-MM-DD'), 'Otros datos');

BEGIN
    INSERT INTO ALQUILER (FECHA_INICIO, FECHA_FIN, OTROS_CAMPOS) VALUES (TO_DATE('2024-01-15', 'YYYY-MM-DD'), TO_DATE('2024-01-08', 'YYYY-MM-DD'), 'Otros datos');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error esperado: ' || SQLERRM);
END;
UPDATE ALQUILER SET FECHA_FIN = TO_DATE('2024-01-20', 'YYYY-MM-DD') WHERE OTROS_CAMPOS = 'Otros datos';

BEGIN
    UPDATE ALQUILER SET FECHA_FIN = TO_DATE('2024-01-10', 'YYYY-MM-DD') WHERE OTROS_CAMPOS = 'Otros datos';
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error esperado: ' || SQLERRM);
END;
SELECT * FROM ALQUILER WHERE OTROS_CAMPOS = 'Otros datos';


-- Para COMPROBAR_TLFN
INSERT INTO PERSONA (TELEFONO, NOMBRE, APELLIDO) VALUES ('123456789', 'Juan', 'Perez');
BEGIN
    INSERT INTO PERSONA (TELEFONO, NOMBRE, APELLIDO) VALUES ('12345', 'Ana', 'Gomez');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error esperado: ' || SQLERRM);
END;
UPDATE PERSONA SET TELEFONO = '987654321' WHERE NOMBRE = 'Juan';
BEGIN
    UPDATE PERSONA SET TELEFONO = '9876' WHERE NOMBRE = 'Juan';
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error esperado: ' || SQLERRM);
END;
SELECT * FROM PERSONA WHERE NOMBRE IN ('Juan', 'Ana');



